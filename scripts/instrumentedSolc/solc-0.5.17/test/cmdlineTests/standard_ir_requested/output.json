{"contracts":{"A":{"C":{"ir":"/*******************************************************
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *******************************************************/


object \"C_6\" {
    code {
        mstore(64, 128)

        // Begin state variable initialization for contract \"C\" (0 variables)
        // End state variable initialization for contract \"C\".


        codecopy(0, dataoffset(\"C_6_deployed\"), datasize(\"C_6_deployed\"))
        return(0, datasize(\"C_6_deployed\"))


        function fun_f_5()  {
            for { let return_flag := 1 } return_flag {} {

                break
            }
        }

    }
    object \"C_6_deployed\" {
        code {
            mstore(64, 128)

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x26121ff0
                {
                    // f()
                    if callvalue() { revert(0, 0) }
                    abi_decode_tuple_(4, calldatasize())
                    fun_f_5()
                    let memPos := allocateMemory(0)
                    let memEnd := abi_encode_tuple__to__fromStack(memPos  )
                    return(memPos, sub(memEnd, memPos))
                }

                default {}
            }
            revert(0, 0)


            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }

            }

            function abi_encode_tuple__to__fromStack(headStart ) -> tail {
                tail := add(headStart, 0)

            }

            function allocateMemory(size) -> memPtr {
                memPtr := mload(64)
                let newFreePtr := add(memPtr, size)
                // protect against overflow
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { revert(0, 0) }
                mstore(64, newFreePtr)
            }

            function fun_f_5()  {
                for { let return_flag := 1 } return_flag {} {

                    break
                }
            }

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

        }
    }
}

"}}},"sources":{"A":{"id":0}}}
